const { GoogleGenAI } = require("@google/genai");
const AnalysisLog = require("../models/AnalysisLog");
const Tesseract = require("tesseract.js");
const axios = require("axios");
const sharp = require("sharp");
const pdfParse = require("pdf-parse");

const genAI_1 = new GoogleGenAI({
  apiKey: process.env.GEMINI_API_KEY_1,
});

const genAI_2 = new GoogleGenAI({
  apiKey: process.env.GEMINI_API_KEY_1,
});

// üì∏ Enhance image for Gemini and OCR
async function preprocessImage(buffer) {
  return sharp(buffer).grayscale().normalize().sharpen().toBuffer();
}

// üî§ Gemini Vision Handler
async function analyzeWithGeminiVision(buffer, mimeType) {
  const base64Data = buffer.toString("base64");

  const result = await genAI_1.models.generateContent({
    model: "gemini-1.5-flash",
    contents: [
      {
        role: "user",
        parts: [
          {
            text:
              "üõ†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ø‡§æ ‡§´‡§æ‡§à‡§≤‡§Æ‡§ß‡•Ç‡§® ‡§Æ‡§ú‡§ï‡•Ç‡§∞ ‡§Ö‡§ö‡•Ç‡§ï‡§™‡§£‡•á ‡§µ‡§æ‡§ö‡§æ ‡§Ü‡§£‡§ø ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§Ö‡§∂‡•Å‡§¶‡•ç‡§ß‡§≤‡•á‡§ñ‡§® ‡§µ ‡§µ‡§ø‡§∞‡§æ‡§Æ‡§ö‡§ø‡§®‡•ç‡§π‡§æ‡§Ç‡§∏‡§π ‡§∏‡•Å‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡§æ.\n" +
              "‚ùå ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•ã‡§£‡§§‡•á‡§π‡•Ä ‡§≠‡§æ‡§∑‡§æ‡§Ç‡§§‡§∞, ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§∏‡§Ç‡§ï‡•ç‡§∑‡•á‡§™ ‡§ï‡§∞‡•Ç ‡§®‡§ï‡§æ.\n" +
              "‚úÖ ‡§´‡§ï‡•ç‡§§ ‡§∏‡•Å‡§ß‡§æ‡§∞‡•Ä‡§§ ‡§Æ‡§ú‡§ï‡•Ç‡§∞ ‡§™‡§∞‡§§ ‡§¶‡•ç‡§Ø‡§æ (as-is corrected output in the original language).",
          },
          {
            inlineData: {
              mimeType,
              data: base64Data,
            },
          },
        ],
      },
    ],
  });

  return (
    result?.candidates?.[0]?.content?.parts?.[0]?.text?.trim() ||
    "[Gemini corrected output missing]"
  );
}

// üß† Extract and correct student answer from text/images/pdfs
async function extractStudentAnswerText(submission) {
  let finalAnswer = "";

  // 1. Direct text answer
  if (submission?.textAnswer?.trim()) {
    finalAnswer += submission.textAnswer.trim();
  }

  console.log({ a: submission.fileUrl });
  // 2. Uploaded files (image/pdf)
  if (submission?.fileUrl) {
    for (const file of submission.fileUrl) {
      const { url, mimeType } = file;
      try {
        const { data } = await axios.get(url, { responseType: "arraybuffer" });
        const buffer = Buffer.from(data);

        const geminiText = await analyzeWithGeminiVision(buffer, mimeType);
        console.log({ geminiText });
        finalAnswer += `\n\n[Gemini (${mimeType})]:\n${geminiText}`;
      } catch (err) {
        console.warn(`‚ùå File processing failed (${mimeType}):`, err.message);
      }
    }
  }

  return finalAnswer.trim() || "[‡§â‡§§‡•ç‡§§‡§∞ ‡§∏‡§æ‡§™‡§°‡§≤‡•á ‡§®‡§æ‡§π‡•Ä]";
}

// üß† Extract and correct teacher question from text/images/pdfs
async function extractTeacherQuestionText(test) {
  let finalQuestion = "";

  // 1. Direct text
  if (test.text?.trim()) {
    finalQuestion += test.text.trim();
  }

  // 2. File-based questions
  if (test.files?.length > 0) {
    for (const file of test.files) {
      const { uri, mimeType } = file;
      try {
        const { data } = await axios.get(uri, { responseType: "arraybuffer" });
        const buffer = Buffer.from(data);

        const geminiText = await analyzeWithGeminiVision(buffer, mimeType);
        finalQuestion += `\n\n[Gemini (${mimeType})]:\n${geminiText}`;
      } catch (err) {
        console.warn(`‚ùå Question file failed (${mimeType}):`, err.message);
      }
    }
  }

  return finalQuestion.trim() || "[‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§∏‡§æ‡§™‡§°‡§≤‡§æ ‡§®‡§æ‡§π‡•Ä]";
}

// answer analyzer
const analyzeAnswer = async (question, answer, testId, studentId) => {
  try {
    console.log("üöÄ Starting the analysis");

    const existingLog = await AnalysisLog.findOne({ testId, studentId });
    const now = new Date();
    if (existingLog && now - existingLog.lastAnalyzedAt < 90 * 1000) {
      throw new Error("‚è≥ Too early to analyze again. Please wait.");
    }

    const result = await genAI_2.models.generateContent({
      model: "gemini-1.5-flash",
      contents: [
        {
          role: "user",
          parts: [
            {
              text: `
‡§ñ‡§æ‡§≤‡•Ä ‡§µ‡§ø‡§¶‡•ç‡§Ø‡§æ‡§∞‡•ç‡§•‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§â‡§§‡•ç‡§§‡§∞‡§æ‡§ö‡•á ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§ï‡§∞‡§æ:

üîπ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï‡§æ‡§ö‡§æ ‡§Æ‡•Ç‡§≥ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®:
${question}

üîπ ‡§µ‡§ø‡§¶‡•ç‡§Ø‡§æ‡§∞‡•ç‡§•‡•ç‡§Ø‡§æ‡§ö‡•á ‡§â‡§§‡•ç‡§§‡§∞ (‡§∏‡•ç‡§µ‡§§‡§É ‡§≤‡§ø‡§π‡§ø‡§≤‡•á‡§≤‡•á):
${answer}

üìå ‡§ï‡•É‡§™‡§Ø‡§æ ‡§≤‡§ï‡•ç‡§∑‡§æ‡§§ ‡§ò‡•ç‡§Ø‡§æ:
- ‡§µ‡§ø‡§¶‡•ç‡§Ø‡§æ‡§∞‡•ç‡§•‡•ç‡§Ø‡§æ‡§®‡•á ‡§â‡§§‡•ç‡§§‡§∞ ‡§®‡§ï‡•ç‡§ï‡•Ä ‡§∏‡•ç‡§µ‡§§‡§É ‡§≤‡§ø‡§π‡§ø‡§≤‡•á ‡§Ü‡§π‡•á ‡§ï‡§æ, ‡§§‡•á ‡§§‡§™‡§æ‡§∏‡§æ.
- ‡§ú‡§∞ ‡§â‡§§‡•ç‡§§‡§∞ ‡§Æ‡•Ç‡§≥ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§®‡§Æ‡•Å‡§®‡•ç‡§Ø‡§æ‡§∂‡•Ä ‡§™‡•Ç‡§∞‡•ç‡§£‡§™‡§£‡•á ‡§ú‡•Å‡§≥‡§§ ‡§Ö‡§∏‡•á‡§≤ (‡§ï‡•â‡§™‡•Ä-‡§™‡•á‡§∏‡•ç‡§ü ‡§µ‡§æ‡§ü‡§§ ‡§Ö‡§∏‡•á‡§≤), ‡§§‡§∞ ‡§ï‡§Æ‡•Ä ‡§ó‡•Å‡§£ ‡§¶‡•ç‡§Ø‡§æ.

- ‡§∏‡§∞‡•ç‡§µ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§æ‡§Ç‡§ö‡•Ä ‡§â‡§§‡•ç‡§§‡§∞‡•á ‡§¶‡§ø‡§≤‡•Ä ‡§Ü‡§π‡•á‡§§ ‡§ï‡§æ?
- ‡§ï‡§æ‡§π‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§µ‡§ó‡§≥‡§≤‡•á ‡§ó‡•á‡§≤‡•á ‡§Ü‡§π‡•á‡§§ ‡§ï‡§æ?
- ‡§â‡§§‡•ç‡§§‡§∞‡§æ‡§Ç‡§ö‡§æ ‡§Ü‡§∂‡§Ø, ‡§∏‡§∞‡•ç‡§ú‡§®‡§∂‡•Ä‡§≤‡§§‡§æ ‡§Ü‡§£‡§ø ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü‡§§‡§æ ‡§ï‡§∂‡•Ä ‡§Ü‡§π‡•á?

‚ùó ‡§ú‡§∞ ‡§ï‡§æ‡§π‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡§æ‡§Ç‡§ö‡•Ä ‡§â‡§§‡•ç‡§§‡§∞‡•á‡§ö ‡§¶‡§ø‡§≤‡•Ä ‡§®‡§∏‡§§‡•Ä‡§≤, ‡§§‡§∞ ‡§ó‡•Å‡§£ ‡§ï‡§Æ‡•Ä ‡§ï‡§∞‡§æ.
- ‡§â‡§§‡•ç‡§§‡§∞‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§Ö‡§ö‡•Ç‡§ï‡§§‡•á‡§µ‡§∞, ‡§∏‡§∞‡•ç‡§ú‡§®‡§∂‡•Ä‡§≤‡§§‡§æ ‡§Ü‡§£‡§ø ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü‡•Ä‡§ï‡§∞‡§£‡§æ‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ó‡•Å‡§£ ‡§¶‡•ç‡§Ø‡§æ.

‚õî ‡§á‡§§‡§∞ ‡§ï‡•ã‡§£‡§§‡§æ‡§π‡•Ä ‡§Æ‡§ú‡§ï‡•Ç‡§∞ ‡§® ‡§≤‡§ø‡§π‡§ø‡§§‡§æ ‡§ñ‡§æ‡§≤‡•Ä‡§≤ JSON ‡§∏‡•ç‡§µ‡§∞‡•Ç‡§™‡§æ‡§§ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•ç‡§Ø‡§æ:

{
  "marksPercent": <‡§ó‡•Å‡§£ ‡§ü‡§ï‡•ç‡§ï‡•á‡§µ‡§æ‡§∞‡•Ä‡§Æ‡§ß‡•ç‡§Ø‡•á>,
  "feedback": "<‡§Æ‡§∞‡§æ‡§†‡•Ä‡§§ ‡§´‡•Ä‡§°‡§¨‡•Ö‡§ï>"
}
`,
            },
          ],
        },
      ],
    });

    const rawText = result.text.trim();

    // Parse JSON safely
    let parsed;
    try {
      const cleanText = rawText
        .replace(/^```json/i, "")
        .replace(/^```/, "")
        .replace(/```$/, "")
        .trim();
      parsed = JSON.parse(cleanText);
      // console.log({parsed})
    } catch (err) {
      console.warn("‚ö†Ô∏è Gemini did not return pure JSON. Trying fallback...");
      const match = rawText.match(/{[^}]+}/s);
      parsed = match ? JSON.parse(match[0]) : null;
    }

    const marksPercent = parsed?.marksPercent ?? 0;
    const feedback = parsed?.feedback ?? "‡§´‡•Ä‡§°‡§¨‡•Ö‡§ï ‡§∏‡§æ‡§™‡§°‡§≤‡§æ ‡§®‡§æ‡§π‡•Ä.";
    // console.log({ marksPercent, feedback });

    await AnalysisLog.findOneAndUpdate(
      { testId, studentId },
      { lastAnalyzedAt: now },
      { upsert: true }
    );

    return { marksPercent, feedback };
  } catch (err) {
    console.error("‚ùå Error analyzing answer:", err.message || err);
    throw err;
  }
};

module.exports = {
  analyzeAnswer,
  extractStudentAnswerText,
  extractTeacherQuestionText,
};
